[
{
	"uri": "//localhost:55916/vi/2-prerequiste/2.1-setupflutter/",
	"title": "Cài đặt Flutter",
	"tags": [],
	"description": "",
	"content": "Nội dung Dành cho Windows Dành cho macOS "
},
{
	"uri": "//localhost:55916/vi/2-prerequiste/2.1-setupflutter/2.1.1-windown/",
	"title": "Dành cho Windows",
	"tags": [],
	"description": "",
	"content": "Tải xuống Flutter SDK\nTải xuống thư mục zip tại Trang web Flutter. Giải nén Flutter SDK vào thư mục có tên là development trên Desktop của bạn. Thư mục tệp ở trên chỉ là khuyến nghị và tham chiếu này sẽ được sử dụng trong suốt workshop Bạn cũng có thể di chuyển nó đến bất kỳ thư mục nào khác. Chỉ cần đảm bảo giữ tham chiếu đến nơi thư mục Flutter của bạn được giải nén.\nThêm Flutter vào Path\nVào thư mục Flutter đã giải nén và sao chép đường dẫn của thư mục đó.\nBạn có thể sao chép nó bằng cách nhấp chuột phải vào thư mục và chọn tùy chọn \u0026ldquo;Copy as Path\u0026rdquo; hoặc Nhấp vào thanh điều hướng ở đầu cửa sổ và sao chép văn bản đường dẫn từ đó. Nhấp vào biểu tượng Windows ở góc dưới bên trái và tìm Environment Variables. Chọn Edit Environment variables for your account. Nó sẽ mở ra một cửa sổ với tab Advanced được chọn tại System Properties, nhấp vào nút Environment Variables\u0026hellip; Trên cửa sổ mở ra, tại phần System variables, tìm Path và nhấp đúp vào đó. Thêm trường mới bằng cách nhấp vào nút New ở bên phải và dán đường dẫn bạn đã sao chép trước đó. Lưu và đóng tất cả các cửa sổ\nĐóng bất kỳ Command Prompt nào\nSau đó mở Command Prompt mới và viết lệnh sau để kiểm tra:\nflutter doctor "
},
{
	"uri": "//localhost:55916/vi/2-prerequiste/2.2-settingandroidstudio/2.2.1-windown/",
	"title": "Dành cho Windows",
	"tags": [],
	"description": "",
	"content": "Cài đặt Android Studio\nĐi đến trang tải xuống Android Studio và tải xuống Trình cài đặt người dùng theo hệ thống của bạn. Chạy trình cài đặt đã tải xuống và làm theo các bước nếu có. Việc này sẽ mất khoảng một phút. Cài đặt tiện ích mở rộng Flutter\nSau khi cài đặt, hãy chạy Android Studio. Ở ngăn bên trái, nhấp vào nút Preferences. Trên trường tìm kiếm, tìm hoặc chọn Flutter và bấm install. Lưu ý rằng nó cũng sẽ yêu cầu bạn cài đặt plugin Dart. Hãy chấp nhận điều đó. Khởi động lại IDE. Bây giờ IDE của bạn đã sẵn sàng. "
},
{
	"uri": "//localhost:55916/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Flutter và AWS Amplify và mục tiêu của workshop này.\nNội dung Giới thiệu về Flutter và AWS Amplify Mục tiêu của workshop "
},
{
	"uri": "//localhost:55916/vi/1-introduce/1.1-anf/",
	"title": "Giới thiệu về Flutter và AWS Amplify.",
	"tags": [],
	"description": "",
	"content": "Flutter: Tạo ứng dụng di động đa nền tảng một cách nhanh chóng\nFlutter là một SDK (Software Development Kit) mã nguồn mở được phát triển bởi Google, cho phép các nhà phát triển xây dựng các ứng dụng di động, web và desktop từ một cơ sở mã duy nhất. Tại sao chọn Flutter? Hiệu năng cao: Cung cấp trải nghiệm người dùng mượt mà, gần như native. Giao diện đẹp mắt: Khung giao diện linh hoạt, tùy biến cao, giúp tạo ra các ứng dụng có giao diện hiện đại. Hot Reload: Thay đổi code và thấy kết quả ngay lập tức, tăng tốc độ phát triển. Đa nền tảng: Một lần viết code, chạy trên nhiều nền tảng (iOS, Android, Web, Desktop). Cộng đồng lớn: Có một cộng đồng người dùng đông đảo, nhiều tài liệu và thư viện hỗ trợ. AWS Amplify: Giải pháp backend toàn diện cho ứng dụng di động\nAWS Amplify là một bộ công cụ và thư viện của Amazon Web Services, giúp các nhà phát triển dễ dàng thêm các tính năng backend vào ứng dụng di động của mình. Tại sao chọn AWS Amplify? Tích hợp dễ dàng: Dễ dàng kết nối với các dịch vụ AWS như Cognito, API Gateway, DynamoDB. Các tính năng phong phú: Cung cấp các tính năng như xác thực người dùng, lưu trữ dữ liệu, push notification, analytics. Mở rộng linh hoạt: Có thể tùy chỉnh và mở rộng để đáp ứng các yêu cầu cụ thể của ứng dụng. Tích hợp với nhiều framework: Hỗ trợ nhiều framework khác nhau như Flutter, React Native, Ionic. "
},
{
	"uri": "//localhost:55916/vi/6-buildapp/6.1-createprogram/",
	"title": "Tạo ứng dụng lập kế hoạch chuyến đi cơ bản cơ bản",
	"tags": [],
	"description": "",
	"content": "Các đoạn code dưới đây sẽ tạo front end cho ứng dụng bạn có thể thay đổi các đoạn code này theo ý bạn thích\nBước 1: Tạo tệp lib/features/trip/ui/trips_list/add_trip_bottomsheet.dart và cập nhật nó bằng mã sau:\nimport \u0026#39;package:amplify_2/features/trip/controller/trips_list_controller.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_hooks/flutter_hooks.dart\u0026#39;; import \u0026#39;package:hooks_riverpod/hooks_riverpod.dart\u0026#39;; import \u0026#39;package:intl/intl.dart\u0026#39;; class AddTripBottomSheet extends HookConsumerWidget { AddTripBottomSheet({ super.key, }); final formGlobalKey = GlobalKey\u0026lt;FormState\u0026gt;(); @override Widget build(BuildContext context, WidgetRef ref) { final tripNameController = useTextEditingController(); final destinationController = useTextEditingController(); final startDateController = useTextEditingController(); final endDateController = useTextEditingController(); return Form( key: formGlobalKey, child: Container( padding: EdgeInsets.only( top: 15, left: 15, right: 15, bottom: MediaQuery.of(context).viewInsets.bottom + 15, ), width: double.infinity, child: Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ TextFormField( controller: tripNameController, keyboardType: TextInputType.name, autofocus: true, autocorrect: false, decoration: const InputDecoration(hintText: \u0026#39;Tên chuyến đi\u0026#39;), textInputAction: TextInputAction.next, validator: (value) { const validatorError = \u0026#34;Vui lòng nhập chuyến đi\u0026#34;; if (value == null || value.isEmpty) { return validatorError; } return null; }, ), const SizedBox( height: 20, ), TextFormField( keyboardType: TextInputType.name, controller: destinationController, autofocus: true, autocorrect: false, decoration: const InputDecoration(hintText: \u0026#34;Mô tả chuyến đi\u0026#34;), textInputAction: TextInputAction.next, validator: (value) { if (value == null || value.isNotEmpty) { return null; } else { return \u0026#39;Vui lòng nhập mô tả chuyến đi\u0026#39;; } }, ), TextFormField( keyboardType: TextInputType.datetime, controller: startDateController, autofocus: true, autocorrect: false, decoration: const InputDecoration(hintText: \u0026#34;Ngày bắt đầu\u0026#34;), textInputAction: TextInputAction.next, validator: (value) { if (value != null \u0026amp;\u0026amp; value.isNotEmpty) { return null; } else { return \u0026#39;Vui lòng nhập ngày bắt đầu\u0026#39;; } }, onTap: () async { DateTime? pickedDate = await showDatePicker( context: context, initialDate: DateTime.now(), firstDate: DateTime(2024), lastDate: DateTime(2100), ); if (pickedDate != null) { String formattedDate = DateFormat(\u0026#39;yyyy-MM-dd\u0026#39;).format(pickedDate); startDateController.text = formattedDate; } else {} }, ), TextFormField( keyboardType: TextInputType.datetime, controller: endDateController, autofocus: true, autocorrect: false, decoration: const InputDecoration(hintText: \u0026#34;Ngày kết thúc\u0026#34;), textInputAction: TextInputAction.next, validator: (value) { if (value != null \u0026amp;\u0026amp; value.isNotEmpty) { return null; } else { return \u0026#39;Vui lòng nhập ngày kết thúc\u0026#39;; } }, onTap: () async { if (startDateController.text.isNotEmpty) { DateTime? pickedDate = await showDatePicker( context: context, initialDate: DateTime.parse(startDateController.text), firstDate: DateTime.parse(startDateController.text), lastDate: DateTime(2100), ); if (pickedDate != null) { String formattedDate = DateFormat(\u0026#39;yyyy-MM-dd\u0026#39;).format(pickedDate); endDateController.text = formattedDate; } } }, ), const SizedBox( height: 20, ), TextButton( child: const Text(\u0026#39;OK\u0026#39;), onPressed: () async { final currentState = formGlobalKey.currentState; if (currentState == null) { return; } if (currentState.validate()) { ref.read(tripsListControllerProvider).add( name: tripNameController.text, destination: destinationController.text, startDate: startDateController.text, endDate: endDateController.text); Navigator.of(context).pop(); } }, ), ], ), ), ); } } Bước 2: Tạo tệp lib/features/trip/ui/trips_list/trip_card.dart và cập nhật nó bằng mã sau:\nimport \u0026#39;package:amplify_2/common/navigation/router/routes.dart\u0026#39;; import \u0026#39;package:amplify_2/models/ModelProvider.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:go_router/go_router.dart\u0026#39;; import \u0026#39;package:cached_network_image/cached_network_image.dart\u0026#39;; import \u0026#39;package:intl/intl.dart\u0026#39;; import \u0026#39;package:amplify_2/common/utils/colors.dart\u0026#39; as constants; class TripCard extends StatelessWidget { const TripCard({super.key, required this.trip, this.imageUrl}); final Trip trip; final String? imageUrl; @override Widget build(BuildContext context) { return InkWell( splashColor: Theme.of(context).primaryColor, borderRadius: BorderRadius.circular(15), onTap: () { context.goNamed( AppRoute.trip.name, pathParameters: {\u0026#39;id\u0026#39;: trip.id}, ); }, child: Card( clipBehavior: Clip.antiAlias, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(15), ), elevation: 5.0, child: Column( children: [ Expanded( child: Container( height: 500, alignment: Alignment.center, color: const Color(constants.primaryColorDark), child: Stack( children: [ Positioned.fill( child: trip.tripImageUrl != null ? Stack(children: [ const Center( child: CircularProgressIndicator(), ), CachedNetworkImage( errorWidget: (context, url, dynamic error) =\u0026gt; const Icon(Icons.error_outline_outlined), imageUrl: trip.tripImageUrl!, cacheKey: trip.tripImageKey, width: double.maxFinite, height: 500, alignment: Alignment.topCenter, fit: BoxFit.fill, ) ]) : Image.asset( \u0026#39;images/amplify.png\u0026#39;, fit: BoxFit.contain, ), ), Positioned( bottom: 16, left: 16, right: 16, child: FittedBox( fit: BoxFit.scaleDown, alignment: Alignment.centerLeft, child: Text( trip.destination, style: Theme.of(context) .textTheme .headlineSmall! .copyWith( color: Colors.white, ), ), )) ], ), ), ), Padding( padding: const EdgeInsets.fromLTRB(2, 8, 8, 4), child: DefaultTextStyle( softWrap: false, overflow: TextOverflow.ellipsis, style: Theme.of(context).textTheme.titleMedium!, child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Padding( padding: const EdgeInsets.only(bottom: 8), child: Text( trip.tripName, style: Theme.of(context) .textTheme .titleMedium! .copyWith(color: Colors.black54), ), ), Text( DateFormat(\u0026#39;dd MMM, yyyy\u0026#39;) .format(trip.startDate.getDateTime()), style: const TextStyle(fontSize: 12), ), Text( DateFormat(\u0026#39;dd MMM, yyyy\u0026#39;) .format(trip.endDate.getDateTime()), style: const TextStyle(fontSize: 12), ), ], ))), ], ), ), ); } } Bước 3: Quay lại tệp lib/features/trip/ui/trips_list/trips_list_page.dart và cập nhật nó bằng mã sau:\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:hooks_riverpod/hooks_riverpod.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/data/trips_repository.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/ui/trips_list/trip_card.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/ui/trips_list/add_trip_bottomsheet.dart\u0026#39;; import \u0026#39;package:amplify_2/common/utils/colors.dart\u0026#39; as constants; class TripsListPage extends HookConsumerWidget { const TripsListPage({ super.key, }); void showAddTripDialog(BuildContext context) async { await showModalBottomSheet( isScrollControlled: true, elevation: 5, context: context, builder: (BuildContext context) { return AddTripBottomSheet(); }, ); } @override Widget build(BuildContext context, WidgetRef ref) { final Orientation orientation = MediaQuery .of(context) .orientation; final tripListValue = ref.watch(tripsListStreamProvider); return Scaffold( appBar: AppBar( centerTitle: true, title: const Text( \u0026#39;Amplify Trips Planner\u0026#39;, ), backgroundColor: const Color(constants.primaryColorDark), ), floatingActionButton: FloatingActionButton( onPressed: () { showAddTripDialog(context); }, backgroundColor: const Color(constants.primaryColorDark), child: const Icon(Icons.add), ), body: tripListValue.when( data: (trips) =\u0026gt; trips.isEmpty ? const Center( child: Text(\u0026#34;Chưa có kế hoạch\u0026#34;), ) : Column( children: [ Flexible( child: GridView.count( crossAxisCount: (orientation == Orientation.portrait) ? 2 : 3, mainAxisSpacing: 4, crossAxisSpacing: 4, padding: const EdgeInsets.all(4), childAspectRatio: (orientation == Orientation.portrait) ? 0.9 : 1.4, children: trips.map((tripData) { return TripCard(trip: tripData!); }).toList(), )) ], ), error: (e, st) =\u0026gt; const Center( child: Text(\u0026#39;Error\u0026#39;), ), loading: () =\u0026gt; const Center( child: CircularProgressIndicator(), ))); } } "
},
{
	"uri": "//localhost:55916/vi/4-addauth/4.1-addauth/",
	"title": "Thêm danh mục xác thực Amplify vào ứng dụng",
	"tags": [],
	"description": "",
	"content": "Bước 1: Điều hướng đến thư mục gốc của ứng dụng và chạy lệnh bên dưới trong terminal của bạn.\namplify add auth Bước 2: Chọn tùy chọn Default configuration và sau đó chọn Email làm phương thức đăng nhập. Sau đó chọn tùy chọn No, I am done.\nUsing service: Cognito, provided by: awscloudformation The current configured provider is Amazon Cognito. Do you want to use the default authentication and security configuration? Default configuration Warning: you will not be able to edit these selections. How do you want users to be able to sign in? Email Do you want to configure advanced settings? No, I am done. ✅ Successfully added auth resource memorymatchgame28e6d925 locally ✅ Some next steps: \u0026#34;amplify push\u0026#34; will build all your local backend resources and provision it in the cloud \u0026#34;amplify publish\u0026#34; will build all your local backend and frontend resources (if you have hosting category added) and provision it in the cloud Bước 3: Bây giờ danh mục Amplify Auth đã sẵn sàng. Chạy lệnh amplify push để tạo tài nguyên trên đám mây. Bước 4: Nhấn Enter. Amplify CLI sẽ triển khai các tài nguyên xác thực và hiển thị xác nhận, như trong ảnh chụp màn hình. "
},
{
	"uri": "//localhost:55916/vi/",
	"title": "Tích hợp AWS Amplify vào Flutter",
	"tags": [],
	"description": "",
	"content": "Tích hợp AWS Amplify vào Flutter: Tạo ứng dụng di động cơ bản với Flutter và AWS Amplify Tổng quan Flutter và AWS Amplify là một sự kết hợp hoàn hảo để xây dựng các ứng dụng di động hiện đại. Trong workshop này, chúng ta sẽ cùng nhau khám phá cách sử dụng hai công cụ này để xây dựng một ứng dụng lập kế hoạch cho các chuyến đi cơ bản.\nNội dung Giới thiệu Chuẩn bị môi trường Tạo dự án Flutter Thêm tính năng Auth Thêm Amplify API vào ứng dụng Xây dựng ứng dụng Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:55916/vi/2-prerequiste/2.2-settingandroidstudio/",
	"title": "Cài đặt Android Studio",
	"tags": [],
	"description": "",
	"content": " Bạn có thể dùng Visual Studio Code hoặc các IDE khác để làm bài workshop này nhưng nên sử dụng Android Studio vì tập trung vào lập trình native nên tốc độ xử lí nhanh hơn (nếu máy yếu mình khuyên sử dụng Visual Studio Code)\nTrong bài workshop này mình sẽ sử dụng công cụ Android Studio cho toàn bộ workshop.\nNội dung Dành cho Windows Dành cho macOS "
},
{
	"uri": "//localhost:55916/vi/2-prerequiste/",
	"title": "Chuẩn bị môi trường",
	"tags": [],
	"description": "",
	"content": "Trong nội dung này chúng ta sẽ cài đặt môi trường bao gồm cài đặt Flutter và cài đặt Android Studio, và tạo người dùng IAM cho bài workshop này.\nNội dung Cài đặt Flutter Cài đặt Android Studio Tạo người dùng IAM "
},
{
	"uri": "//localhost:55916/vi/2-prerequiste/2.1-setupflutter/2.1.2-macos/",
	"title": "Dành cho mac OS",
	"tags": [],
	"description": "",
	"content": "Tải xuống Flutter SDK\nTải xuống thư mục zip tại Trang web Flutter. flutter_macOS_\u0026lt;-version-number-\u0026gt;.zipflutter_macos_arm64_\u0026lt;-version-number-\u0026gt;.zip Hãy đảm bảo tải xuống gói phát hành Flutter chính xác cho chip của máy Mac. Tải xuống tệpcho máy tính xách tay chip Intel hoặc tải xuống tệp cho Apple Silicon.\nGiải nén Flutter SDK vào thư mục có tên là development trên Desktop của bạn. Bước thư mục tệp ở trên chỉ là khuyến nghị và tham chiếu này sẽ được sử dụng trong suốt workshop. Bạn cũng có thể di chuyển nó đến bất kỳ thư mục nào khác. Chỉ cần đảm bảo giữ tham chiếu đến nơi thư mục Flutter của bạn được giải nén.\nThêm Flutter vào Path\nVào thư mục Flutter đã giải nén và sao chép đường dẫn của thư mục đó. Bạn có thể sao chép nó bằng cách nhấp chuột phải vào thư mục Flutter và chọn tùy chọn \u0026ldquo;Get Info\u0026rdquo;. Thao tác này sẽ mở một cửa sổ có thông tin thư mục. Trong tab General , hãy kiểm tra Where information. Chọn toàn bộ văn bản và sao chép. Mở terminal và viết lệnh sau để tìm hiểu về loại terminal của bạn: echo $SHELL Nếu bạn đang sử dụng Bash, hãy viết: open ~/.bash_profile # or open ~/.bashrc Nếu bạn sử dụng Z shell, hãy viết: open ~/.zshrc Dán nội dung sau vào tệp dưới dạng một dòng mới: export PATH=\u0026#34;$PATH:[PATH_OF_FLUTTER]/flutter/bin\u0026#34; Đóng tất cả các thiết bị đầu cuối và mở một thiết bị đầu cuối mới Sau đó mở Terminal mới và viết lệnh sau để kiểm tra: flutter doctor "
},
{
	"uri": "//localhost:55916/vi/2-prerequiste/2.2-settingandroidstudio/2.2.2-macos/",
	"title": "Dành cho mac OS",
	"tags": [],
	"description": "",
	"content": "Cài đặt Android Studio\nĐi đến trang tải xuống Android Studio và tải xuống tệp theo hệ thống của bạn. Giải nén file zip và di chuyển ứng dụng Android Studio đã giải nén vào thư mục. Thực hiện theo các bước ở đây để cài đặt code dòng lệnh. Cài đặt tiện ích mở rộng Flutter\nSau khi cài đặt, hãy chạy Android Studio. Ở ngăn bên trái, nhấp vào nút Preferences. Trên trường tìm kiếm đã mở Flutter, hãy cài đặt tiện ích mở rộng Flutter từ người dùng vào trường tìm kiếm . Lưu ý rằng nó cũng sẽ yêu cầu bạn cài đặt plugin Dart. Hãy chấp nhận điều đó. Khởi động lại IDE. Bây giờ IDE của bạn đã sẵn sàng. "
},
{
	"uri": "//localhost:55916/vi/6-buildapp/6.2-interface/",
	"title": "Giao diện khi triển khai ứng dụng",
	"tags": [],
	"description": "",
	"content": " Your browser does not support the video tag. "
},
{
	"uri": "//localhost:55916/vi/1-introduce/1.2-target/",
	"title": "Mục tiêu của workshop",
	"tags": [],
	"description": "",
	"content": " Tạo một backend Amplify cho ứng dụng\nXây dựng một ứng dụng Flutter đơn giản với chức năng đăng nhập, đăng ký sử dụng AWS Amplify Auth.\nThêm API vào ứng dụng của mình bằng Amplify CLI để truy xuất và lưu trữ dữ liệu phiên làm việc của bạn. API bạn sẽ tạo là API GraphQL sử dụng AWS AppSync (dịch vụ GraphQL được quản lý) được hỗ trợ bởi Amazon DynamoDB (cơ sở dữ liệu NoSQL).\n"
},
{
	"uri": "//localhost:55916/vi/4-addauth/4.2-amplifyauth/",
	"title": "Triển khai luồng xác thực ứng dụng bằng Amplify Authenticator",
	"tags": [],
	"description": "",
	"content": "Bước 1: Tạo file lib/features/trip/ui/trips_list/trips_list_page.dart và cập nhật bằng mã sau. Đây sẽ là trang chủ của ứng dụng.\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:hooks_riverpod/hooks_riverpod.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/data/trips_repository.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/ui/trips_list/trip_card.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/ui/trips_list/add_trip_bottomsheet.dart\u0026#39;; import \u0026#39;package:amplify_2/common/utils/colors.dart\u0026#39; as constants; class TripsListPage extends HookConsumerWidget { const TripsListPage({ super.key, }); @override Widget build(BuildContext context, WidgetRef ref) { final Orientation orientation = MediaQuery .of(context) .orientation; final tripListValue = ref.watch(tripsListStreamProvider); return Scaffold( appBar: AppBar( centerTitle: true, title: const Text( \u0026#39;Amplify Trips Planner\u0026#39;, ), backgroundColor: const Color(constants.primaryColorDark), ), floatingActionButton: FloatingActionButton( onPressed: () { }, backgroundColor: const Color(constants.primaryColorDark), child: const Icon(Icons.add), ), body: const Center( child: Text(\u0026#39;Danh sách chuyến đi\u0026#39;), ) ); } } Bước 2: Tạo file lib/trips_planner_app.dart . Cập nhật tệp bằng mã sau để tạo tuyến đường cho trang chủ của ứng dụng.\nĐoạn code dưới đây sẽ thiết lập cấu trúc cơ bản để hiển thị danh sách các chuyến đi và có một nút (dưới/phải) để thêm chuyến đi mới. Danh sách các chuyến đi và chức năng thêm chuyến đi sẽ được triển khai trong phần khác của ứng dụng. import \u0026#39;package:amplify_2/features/trip/ui/trips_list/trips_list_page.dart\u0026#39;; import \u0026#39;package:amplify_authenticator/amplify_authenticator.dart\u0026#39;; import \u0026#39;package:amplify_2/common/navigation/router/routes.dart\u0026#39;; import \u0026#39;package:amplify_2/common/utils/colors.dart\u0026#39; as constants; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:go_router/go_router.dart\u0026#39;; class TripsPlannerApp extends StatelessWidget { const TripsPlannerApp({ required this.isAmplifySuccessfullyConfigured, super.key, }); final bool isAmplifySuccessfullyConfigured; @override Widget build(BuildContext context) { final router = GoRouter( routes: [ GoRoute( path: \u0026#39;/\u0026#39;, name: AppRoute.home.name, builder: (context, state) =\u0026gt; isAmplifySuccessfullyConfigured ? const TripsListPage() : const Scaffold( body: Center( child: Text(\u0026#39;Đã cố gắng cấu hình Amplify\u0026#39;), ), ) ) ], errorBuilder: (context, state) =\u0026gt; Scaffold( body: Center( child: Text(state.error.toString()), ), ) ); return Authenticator( child: MaterialApp.router( routerConfig: router, builder: Authenticator.builder(), theme: ThemeData( colorScheme: ColorScheme.fromSwatch(primarySwatch: constants.primaryColor) .copyWith( background: const Color(0xff82CFEA), ), ), ), ); } } Bước 3: Mở main.darttệp và cập nhật bằng mã sau.\nĐoạn code này dùng để khởi tạo và cấu hình các dịch vụ của AWS Amplify (đã thêm AmplifyAuthCognito). import \u0026#39;package:amplify_2/trips_planner_app.dart\u0026#39;; import \u0026#39;package:amplify_api/amplify_api.dart\u0026#39;; import \u0026#39;package:amplify_auth_cognito/amplify_auth_cognito.dart\u0026#39;; import \u0026#39;package:amplify_flutter/amplify_flutter.dart\u0026#39;; import \u0026#39;package:amplify_storage_s3/amplify_storage_s3.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_riverpod/flutter_riverpod.dart\u0026#39;; import \u0026#39;amplifyconfiguration.dart\u0026#39;; import \u0026#39;package:amplify_api/amplify_api.dart\u0026#39;; import \u0026#39;package:amplify_datastore/amplify_datastore.dart\u0026#39;; import \u0026#39;package:amplify_2/models/ModelProvider.dart\u0026#39;; Future\u0026lt;void\u0026gt; main() async { WidgetsFlutterBinding.ensureInitialized(); bool isAmplifySuccessfullyConfigured = false; try { await _configureAmplify(); isAmplifySuccessfullyConfigured = true; } on AmplifyAlreadyConfiguredException { debugPrint(\u0026#39;Amplify configuration failed.\u0026#39;); } runApp( ProviderScope( child: TripsPlannerApp( isAmplifySuccessfullyConfigured: isAmplifySuccessfullyConfigured)), ); } Future\u0026lt;void\u0026gt; _configureAmplify() async { await Amplify.addPlugins([ AmplifyAuthCognito(), ]); await Amplify.configure(amplifyconfig); } Bước 4: Sử dụng lệnh bên dưới để chạy ứng dụng bằng điện thoại, sử dụng luồng xác thực để tạo tài khoản mới.\nflutter run "
},
{
	"uri": "//localhost:55916/vi/3-createproject/3.1-pubspecandpath/",
	"title": "Cấu hình file pubspec.yaml và các đường dẫn",
	"tags": [],
	"description": "",
	"content": " Vì Amplify luôn luôn cập nhật các phiên bản mới nhất và phiên bản mới nhất lại có thể xung đột với các package khác nên phải cài đúng phiên bản để chạy ứng dụng được thuận lợi.\nThêm các thư viện sau: version: 1.0.0+1 environment: sdk: ^3.5.1 dependencies: flutter: sdk: flutter cupertino_icons: ^1.0.8 amplify_api: ^2.4.0 amplify_auth_cognito: ^2.4.0 amplify_authenticator: ^2.1.2 amplify_datastore: ^2.4.0 amplify_flutter: ^2.4.0 amplify_storage_s3: ^2.4.0 cached_network_image: ^3.4.0 flutter_hooks: ^0.20.5 flutter_riverpod: ^2.5.1 go_router: ^14.2.7 hooks_riverpod: ^2.5.2 image_picker: ^1.1.2 intl: ^0.19.0 file_picker: ^8.0.7 timelines: ^0.1.0 url_launcher: ^6.3.0 dev_dependencies: flutter_lints: ^4.0.0 flutter_test: sdk: flutter flutter: #tạo một thư mục hình ảnh tên là images, bỏ một ảnh vào thư viện uses-material-design: true assets: - images/amplify.png Vì hay có sự xung đột giữa các phiên bản Amplify, Dart và Flutter nên mình sẽ cấu hình sẵn các file sau nếu các bạn có bị lỗi.\nĐối với android\nCấu hình file android/app/build.gradle plugins { id \u0026#34;com.android.application\u0026#34; id \u0026#34;kotlin-android\u0026#34; // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins. id \u0026#34;dev.flutter.flutter-gradle-plugin\u0026#34; } android { namespace = \u0026#34;com.example.nameapp\u0026#34; compileSdk = flutter.compileSdkVersion ndkVersion = flutter.ndkVersion compileOptions { sourceCompatibility = JavaVersion.VERSION_1_8 targetCompatibility = JavaVersion.VERSION_1_8 } kotlinOptions { jvmTarget = \u0026#39;1.8\u0026#39; freeCompilerArgs += [ \u0026#39;-Xskip-metadata-version-check\u0026#39; ] } defaultConfig { // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html). applicationId = \u0026#34;com.example.nameapp\u0026#34; // You can update the following values to match your application needs. // For more information, see: https://flutter.dev/to/review-gradle-config. minSdkVersion 24 targetSdk = flutter.targetSdkVersion versionCode = flutter.versionCode versionName = flutter.versionName } buildTypes { release { // TODO: Add your own signing config for the release build. // Signing with the debug keys for now, so `flutter run --release` works. signingConfig = signingConfigs.debug } } } flutter { source = \u0026#34;../..\u0026#34; } Cấu hình file android/settings.gradle pluginManagement { def flutterSdkPath = { def properties = new Properties() file(\u0026#34;local.properties\u0026#34;).withInputStream { properties.load(it) } def flutterSdkPath = properties.getProperty(\u0026#34;flutter.sdk\u0026#34;) assert flutterSdkPath != null, \u0026#34;flutter.sdk not set in local.properties\u0026#34; return flutterSdkPath }() includeBuild(\u0026#34;$flutterSdkPath/packages/flutter_tools/gradle\u0026#34;) repositories { google() mavenCentral() gradlePluginPortal() } } plugins { id \u0026#34;dev.flutter.flutter-plugin-loader\u0026#34; version \u0026#34;1.0.0\u0026#34; id \u0026#34;com.android.application\u0026#34; version \u0026#34;7.3.0\u0026#34; apply false id \u0026#34;org.jetbrains.kotlin.android\u0026#34; version \u0026#34;2.0.20\u0026#34; apply false } include \u0026#34;:app\u0026#34; Đối với IOS:\nTạo file có tên là Podfile # Uncomment this line to define a global platform for your project platform :ios, \u0026#39;13.5\u0026#39; # CocoaPods analytics sends network stats synchronously affecting flutter build latency. ENV[\u0026#39;COCOAPODS_DISABLE_STATS\u0026#39;] = \u0026#39;true\u0026#39; project \u0026#39;Runner\u0026#39;, { \u0026#39;Debug\u0026#39; =\u0026gt; :debug, \u0026#39;Profile\u0026#39; =\u0026gt; :release, \u0026#39;Release\u0026#39; =\u0026gt; :release, } def flutter_root generated_xcode_build_settings_path = File.expand_path(File.join(\u0026#39;..\u0026#39;, \u0026#39;Flutter\u0026#39;, \u0026#39;Generated.xcconfig\u0026#39;), __FILE__) unless File.exist?(generated_xcode_build_settings_path) raise \u0026#34;#{generated_xcode_build_settings_path} must exist. If you\u0026#39;re running pod install manually, make sure flutter pub get is executed first\u0026#34; end File.foreach(generated_xcode_build_settings_path) do |line| matches = line.match(/FLUTTER_ROOT\\=(.*)/) return matches[1].strip if matches end raise \u0026#34;FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get\u0026#34; end require File.expand_path(File.join(\u0026#39;packages\u0026#39;, \u0026#39;flutter_tools\u0026#39;, \u0026#39;bin\u0026#39;, \u0026#39;podhelper\u0026#39;), flutter_root) flutter_ios_podfile_setup target \u0026#39;Runner\u0026#39; do use_frameworks! use_modular_headers! flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__)) end post_install do |installer| installer.pods_project.targets.each do |target| flutter_additional_ios_build_settings(target) end end Tạo thư mục mẫu như sau: Tạo file lib/common/navigation/router/routes.dart\nenum AppRoute { home, trip, editTrip, } Tạo file lib/common/utils/colors.dart import \u0026#39;package:flutter/material.dart\u0026#39;; const Map\u0026lt;int, Color\u0026gt; primarySwatch = { 50: Color.fromRGBO(255, 207, 68, .1), 100: Color.fromRGBO(255, 207, 68, .2), 200: Color.fromRGBO(255, 207, 68, .3), 300: Color.fromRGBO(255, 207, 68, .4), 400: Color.fromRGBO(255, 207, 68, .5), 500: Color.fromRGBO(255, 207, 68, .6), 600: Color.fromRGBO(255, 207, 68, .7), 700: Color.fromRGBO(255, 207, 68, .8), 800: Color.fromRGBO(255, 207, 68, .9), 900: Color.fromRGBO(255, 207, 68, 1), }; const MaterialColor primaryColor = MaterialColor(0xFFFFCF44, primarySwatch); const int primaryColorDark = 0xFFFD9725; "
},
{
	"uri": "//localhost:55916/vi/3-createproject/3.2-connectamplify/",
	"title": "Kết nối với AWS Amplify",
	"tags": [],
	"description": "",
	"content": "Bước 1: Điều hướng đến thư mục gốc của ứng dụng và cung cấp chương trình phụ trợ Amplify cho ứng dụng bằng cách chạy lệnh bên dưới trong thiết bị đầu cuối của bạn.\namplify init Bước 2: Nhập tên cho dự án Amplify hoặc chấp nhận tên được đề xuất và nhấn Enter.\n? Enter a name for the project memorymatchgame The following configuration will be applied: Project information | Name: memorymatchgame | Environment: dev | Default editor: Visual Studio Code | App type: flutter | Configuration file location: ./lib/ ? Initialize the project with the above configuration? (Y/n) Đối với người dùng android studio: Bước 3: Nhấn Enter lần nữa để chấp nhận các tùy chọn tự động tạo và chọn phương thức Xác thực AWS. Trong ví dụ này, mình đang sử dụng cấu hình AWS. Amplify CLI sẽ khởi tạo phần phụ trợ và kết nối dự án với đám mây.\nĐối với người dùng Visual Studio code: Amplify CLI sẽ thêm một thư mục mới có tên amplify là thư mục gốc của ứng dụng, chứa dự án amplify và thông tin chi tiết về backend. Và nó cũng sẽ thêm một dartfile (amplifyconfiguration.dart) mới vào lib/. Ứng dụng sẽ sử dụng tệp này để biết cách tiếp cận các tài nguyên backend được cung cấp của bạn khi chạy. "
},
{
	"uri": "//localhost:55916/vi/4-addauth/4.3-screenauth/",
	"title": "Màn hình xác thực ứng dụng bằng Amplify Authenticator",
	"tags": [],
	"description": "",
	"content": " Your browser does not support the video tag. "
},
{
	"uri": "//localhost:55916/vi/3-createproject/",
	"title": "Tạo dự án Flutter",
	"tags": [],
	"description": "",
	"content": "Trong nội dung này chúng ta thêm các gói Amplify và các phụ thuộc khác vào ứng dụng đồng thời tạo các hằng số mà ứng dụng sẽ sử dụng để xác định các routes và màu sắc của nó. Cuối cùng chúng ta sẽ cung cấp phần Amplify backend cho ứng dụng.\nNội dung Cấu hình file pubspec.yaml và các đường dẫn Kết nối với AWS Amplify "
},
{
	"uri": "//localhost:55916/vi/2-prerequiste/2.3-settingamplifycli/",
	"title": "Tạo người dùng IAM",
	"tags": [],
	"description": "",
	"content": "Cài đặt Amplify CLI\nCài đặt cURL nếu bạn chưa từ Trang web chính thức Chạy các lệnh sau để cài đặt Amplify CLI Mac và Linux: curl -sL https://aws-amplify.github.io/amplify-cli/install | bash \u0026amp;\u0026amp; $SHELL Windows: curl -sL https://aws-amplify.github.io/amplify-cli/install-win -o install.cmd \u0026amp;\u0026amp; install.cmd Cấu hình Amplify\nCLI Amplify yêu cầu người dùng IAM có quyền chính sách phù hợp để tương tác với tài khoản AWS. Lệnh này sẽ hướng dẫn qua quy trình tạo người dùng mới trong tài khoản AWS và lưu trữ thông tin xác thực hồ sơ người dùng trong môi trường cục bộ. Các lệnh trong tương lai sẽ chạy với CLI sẽ sử dụng các thông tin đăng nhập này để thực hiện các hành động mà yêu cầu amplify configure. amplify configure amplify configure sẽ yêu cầu bạn đăng nhập vào Bảng điều khiển AWS.\nSau khi bạn đăng nhập, Amplify CLI sẽ yêu cầu bạn tạo người dùng IAM. Chọn khu vực mà bạn muốn và làm theo hướng dẫn.\nSpecify the AWS Region ? region: # Your preferred region Follow the instructions at https://docs.amplify.aws/cli/start/install/#configure-the-amplify-cli to complete the user creation in the AWS console https://console.aws.amazon.com/iamv2/home#/users/create Tạo người dùng IAM\nĐiều hướng đến nút Trang tạo người dùng IAM nếu nó chưa mở.\nNhập Tên người dùng và chọn Next. Bạn có thể đặt tên người dùng là gì cũng được nhưng mình sẽ gọi nó là amplify-dev. Chọn Attach policies directly và chọn AdministratorAccess-Amplify làm Permissions policy. Chọn Next. Trên trang Review, hãy kiểm tra xem mọi thứ có ổn không và chọn Create user. Thao tác này sẽ chuyển hướng đến trang danh sách người dùng. Chọn người dùng bạn vừa tạo. Trên trang chi tiết người dùng, điều hướng đến tab Security credentials, cuộn xuống Access keys và chọn Create access keys. Trên trang tiếp theo, chọn Command Line Interface, xác nhận cảnh báo và chọn Next. Trên trang tiếp theo, chọn Create access key. Sau đó, bạn sẽ thấy một trang có khóa truy cập cho người dùng. Sử dụng biểu tượng sao chép để sao chép các giá trị này vào khay nhớ tạm, chọn nút Done, sau đó quay lại CLI Khuếch đại. Nhập khóa truy cập và khóa truy cập bí mật Nhập các giá trị bạn vừa sao chép vào lời nhắc CLI tương ứng. Sử dụng làm tên hồ sơ AmplifyWorkshop Enter the access key of the newly created user: ? accessKeyId: # YOUR_ACCESS_KEY_ID ? secretAccessKey: # YOUR_SECRET_ACCESS_KEY This would update/create the AWS Profile in your local machine ? Profile Name: # (default) Successfully set up the new user. "
},
{
	"uri": "//localhost:55916/vi/4-addauth/",
	"title": "Thêm tính năng Auth",
	"tags": [],
	"description": "",
	"content": "Trong nội dung này, chúng ta sẽ thêm các Amplify packages và các phụ thuộc khác vào ứng dụng. Tiếp theo, chúng ta sẽ tạo các constants mà ứng dụng sẽ sử dụng để xác định các routes và màu sắc của nó. Và cuối cùng, chúng ta sẽ cung cấp Amplify backend cho ứng dụng.\nNội dung Thêm danh mục xác thực Amplify vào ứng dụng Triển khai luồng xác thực ứng dụng bằng Amplify Authenticator Màn hình xác thực ứng dụng bằng Amplify Authenticator Xem thông tin về người dùng đã đăng ký thông qua Amplify Auth trên AWS Console "
},
{
	"uri": "//localhost:55916/vi/4-addauth/4.4-profileuser/",
	"title": "Xem thông tin về người dùng đã đăng ký thông qua Amplify Auth trên AWS Console",
	"tags": [],
	"description": "",
	"content": " Cần truy cập vào dịch vụ Amazon Cognito, vì Amplify Auth sử dụng Cognito làm backend.\nĐây là các bước bạn có thể thực hiện:\nĐăng nhập vào AWS Console (console.aws.amazon.com).\nTìm và chọn dịch vụ \u0026ldquo;Cognito\u0026rdquo; trong danh sách dịch vụ.\nChọn \u0026ldquo;Manage User Pools\u0026rdquo;.\nTìm và chọn User Pool tương ứng với ứng dụng Amplify của bạn. Trong menu bên trái, chọn \u0026ldquo;Users pool name\u0026rdquo; mà bạn đã tạo trước đó.\nỞ đây, bạn sẽ thấy danh sách tất cả người dùng đã đăng ký. "
},
{
	"uri": "//localhost:55916/vi/5-addamplifyapi/5.1-addapi/",
	"title": "Thêm Amplify API vào ứng dụng",
	"tags": [],
	"description": "",
	"content": "Bước 1: Điều hướng đến thư mục gốc của ứng dụng và cung cấp tài nguyên API Amplify bằng cách chạy lệnh bên dưới trong thiết bị đầu cuối của bạn.\namplify add api Bước 2: Chọn tùy chọn GraphQL và nhấn Enter, Cập nhật các thiết lập được đề xuất như bên dưới. Cuộn lên tùy chọn Authorization modes và đổi thành Amazon Cognito User Pool. Chọn No cho lời nhắc loại xác thực bổ sung. Chọn tùy chọn Continue.Phần GrapQL API chọn Coflict detection: Disabled, Chọn tiếp yes, Phần default resolution strategy chọn Auto Merge, Chọn tiếp Continue, Chọn mẫu Blank Schema và nhấn Enter. Chọn No để chỉnh sửa lời nhắc lược đồ. Amplify CLI sẽ thêm một thư mục mới cho API, trong đó có chứa schema.graphql tệp mà bạn sẽ xác định các mô hình cho ứng dụng. Bước 3: Mở tệp schema.graphql và thay thế nội dung của tệp bằng nội dung sau để xác định mô hình phiên làm việc\ntype Trip @model @auth(rules: [{ allow: owner }]) { id: ID! tripName: String! destination: String! startDate: AWSDate! endDate: AWSDate! tripImageUrl: String tripImageKey: String } "
},
{
	"uri": "//localhost:55916/vi/5-addamplifyapi/",
	"title": "Thêm Amplify API vào ứng dụng",
	"tags": [],
	"description": "",
	"content": "Trong nội dung này, chúng ta sẽ xác thực người dùng bằng danh mục xác thực Amplify bằng cách sử dụng Amazon Cognito, một dịch vụ nhận dạng người dùng được quản lý. Đồng thời học cách sử dụng thư viện Amplify Authenticator để nhanh chóng tạo luồng xác thực cho ứng dụng, cho phép người dùng đăng ký, đăng nhập và đặt lại mật khẩu chỉ bằng một vài đoạn code.\nNội dung Thêm Amplify API vào ứng dụng Thêm mô hình dữ liệu phiên làm việc vào ứng dụng Triển khai tính năng ứng dụng "
},
{
	"uri": "//localhost:55916/vi/5-addamplifyapi/5.2-adddata/",
	"title": "Thêm mô hình dữ liệu phiên làm việc vào ứng dụng",
	"tags": [],
	"description": "",
	"content": "Bước 1: Chạy lệnh bên dưới trong thư mục gốc của ứng dụng để tạo tệp mô hình phiên làm việc.\namplify codegen models Amplify CLI sẽ tạo các tệp dart trong lib/models như trong thư mục.\nBước 2: Chạy lệnh amplify push để tạo tài nguyên trên đám mây. Bước 3: Nhấn Enter. Amplify CLI sẽ triển khai các tài nguyên và hiển thị xác nhận, như trong ảnh chụp màn hình. Bước 4: Mở main.dart file và cập nhật như bên dưới để thêm plugin Amplify API vào hàm _configureAmplify().\nimport \u0026#39;package:amplify_2/trips_planner_app.dart\u0026#39;; import \u0026#39;package:amplify_api/amplify_api.dart\u0026#39;; import \u0026#39;package:amplify_auth_cognito/amplify_auth_cognito.dart\u0026#39;; import \u0026#39;package:amplify_flutter/amplify_flutter.dart\u0026#39;; import \u0026#39;package:amplify_storage_s3/amplify_storage_s3.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_riverpod/flutter_riverpod.dart\u0026#39;; import \u0026#39;amplifyconfiguration.dart\u0026#39;; import \u0026#39;package:amplify_api/amplify_api.dart\u0026#39;; import \u0026#39;package:amplify_datastore/amplify_datastore.dart\u0026#39;; import \u0026#39;package:amplify_2/models/ModelProvider.dart\u0026#39;; Future\u0026lt;void\u0026gt; main() async { WidgetsFlutterBinding.ensureInitialized(); bool isAmplifySuccessfullyConfigured = false; try { await _configureAmplify(); isAmplifySuccessfullyConfigured = true; } on AmplifyAlreadyConfiguredException { debugPrint(\u0026#39;Amplify configuration failed.\u0026#39;); } runApp( ProviderScope( child: TripsPlannerApp( isAmplifySuccessfullyConfigured: isAmplifySuccessfullyConfigured)), ); } Future\u0026lt;void\u0026gt; _configureAmplify() async { await Amplify.addPlugins([ AmplifyAuthCognito(), AmplifyDataStore(modelProvider: ModelProvider.instance), AmplifyAPI(), ]); await Amplify.configure(amplifyconfig); } "
},
{
	"uri": "//localhost:55916/vi/5-addamplifyapi/5.3-upfeature/",
	"title": "Triển khai tính năng ứng dụng",
	"tags": [],
	"description": "",
	"content": "Bước 1: Tạo file lib/features/trip/services/trips_datastore_service.dart và cập nhật nó bằng mã sau để tạo tệp TripsDataStoreService chứa các hàm sau:\nĐoạn code dưới đây định nghĩa một dịch vụ TripsDataStoreService để quản lý dữ liệu chuyến đi trong ứng dụng, dịch vụ này cung cấp các phương thức để lắng nghe các thay đổi trong dữ liệu chuyến đi, thêm, xóa và cập nhật các chuyến đi (hiện tại chỉ có \u0026rsquo;thêm\u0026rsquo;) trong DataStore của Amplify. import \u0026#39;dart:async\u0026#39;; import \u0026#39;package:amplify_flutter/amplify_flutter.dart\u0026#39;; import \u0026#39;package:amplify_2/models/ModelProvider.dart\u0026#39;; import \u0026#39;package:flutter/cupertino.dart\u0026#39;; import \u0026#39;package:flutter_riverpod/flutter_riverpod.dart\u0026#39;; final tripsDataStoreServiceProvider = Provider\u0026lt;TripsDataStoreService\u0026gt;((ref) { final service = TripsDataStoreService(); return service; }); class TripsDataStoreService { TripsDataStoreService(); Stream\u0026lt;List\u0026lt;Trip\u0026gt;\u0026gt; listenToTrips() { return Amplify.DataStore.observeQuery( Trip.classType, sortBy: [Trip.STARTDATE.ascending()], ) .map((event) =\u0026gt; event.items .where((element) =\u0026gt; element.endDate.getDateTime().isAfter(DateTime.now())) .toList()) .handleError( (error) { debugPrint(\u0026#39;listenToTrips: A Stream error happened\u0026#39;); }, ); } Stream\u0026lt;List\u0026lt;Trip\u0026gt;\u0026gt; listenToPastTrips() { return Amplify.DataStore.observeQuery( Trip.classType, sortBy: [Trip.STARTDATE.ascending()], ) .map((event) =\u0026gt; event.items .where((element) =\u0026gt; element.endDate.getDateTime().isBefore(DateTime.now())) .toList()) .handleError( (error) { debugPrint(\u0026#39;listenToTrips: A Stream error happened\u0026#39;); }, ); } Stream\u0026lt;Trip\u0026gt; getTripStream(String id) { final tripStream = Amplify.DataStore.observeQuery(Trip.classType, where: Trip.ID.eq(id)).map((event) =\u0026gt; event.items.toList().single); return tripStream; } Future\u0026lt;void\u0026gt; addTrip(Trip trip) async { try { await Amplify.DataStore.save(trip); } on Exception catch (error) { debugPrint(error.toString()); } } Future\u0026lt;void\u0026gt; deleteTrip(Trip trip) async { try { await Amplify.DataStore.delete(trip); } on Exception catch (error) { debugPrint(error.toString()); } } Future\u0026lt;void\u0026gt; updateTrip(Trip updatedTrip) async { try { final tripsWithId = await Amplify.DataStore.query(Trip.classType, where: Trip.ID.eq(updatedTrip.id),); final oldTrip = tripsWithId.first; final newTrip = oldTrip.copyWith(tripName: updatedTrip.tripName, destination: updatedTrip.destination, startDate: updatedTrip.startDate, endDate: updatedTrip.endDate, tripImageKey: updatedTrip.tripImageKey, tripImageUrl: updatedTrip.tripImageUrl, ); await Amplify.DataStore.save(newTrip); } on Exception catch (error) { debugPrint(error.toString()); } } } Bước 2: Tạo file lib/features/trip/data/trips_repository.dart và cập nhật bằng mã sau:\nĐoạn mã dưới đây định nghĩa một TripsRepository để quản lý dữ liệu chuyến đi trong ứng dụng Flutter sử dụng AWS Amplify và Riverpod. Dịch vụ này cung cấp các phương thức để lấy danh sách các chuyến đi, thêm chuyến đi mới và lấy thông tin chi tiết của một chuyến đi cụ thể. Mình sử dụng Riverpod để quản lý trạng thái và cung cấp dữ liệu cho các widget trong ứng dụng. import \u0026#39;package:amplify_2/features/trip/services/trips_datastore_service.dart\u0026#39;; import \u0026#39;package:amplify_2/models/Trip.dart\u0026#39;; import \u0026#39;package:hooks_riverpod/hooks_riverpod.dart\u0026#39;; final tripsRepositoryProvider = Provider\u0026lt;TripsRepository\u0026gt;((ref) { TripsDataStoreService tripsDataStoreService = ref.read(tripsDataStoreServiceProvider); return TripsRepository(tripsDataStoreService); }); final tripsListStreamProvider = StreamProvider.autoDispose\u0026lt;List\u0026lt;Trip?\u0026gt;\u0026gt;((ref){ final tripsRepository = ref.watch(tripsRepositoryProvider); return tripsRepository.getTrips(); }); class TripsRepository { TripsRepository(this.tripsDataStoreService); final TripsDataStoreService tripsDataStoreService; Stream\u0026lt;List\u0026lt;Trip\u0026gt;\u0026gt; getTrips() { return tripsDataStoreService.listenToTrips(); } Future\u0026lt;void\u0026gt; add(Trip trip) async { return tripsDataStoreService.addTrip(trip); } Stream\u0026lt;Trip\u0026gt; get(String id) { return tripsDataStoreService.getTripStream(id); } } Bước 3: Mở tệp lib/features/trip/controller/trips_list_controller.dart và cập nhật nó bằng mã sau:\nĐoạn code dưới đây cũng định nghĩa một TripsListController để quản lý việc thêm các chuyến đi mới vào ứng dụng Flutter sử dụng AWS Amplify và Riverpod. Dịch vụ này cung cấp phương thức để thêm các chuyến đi mới vào DataStore của Amplify Sử dụng Riverpod để quản lý trạng thái và cung cấp dữ liệu cho các widget trong ứng dụng import \u0026#39;package:amplify_flutter/amplify_flutter.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/data/trips_repository.dart\u0026#39;; import \u0026#39;package:amplify_2/models/ModelProvider.dart\u0026#39;; import \u0026#39;package:hooks_riverpod/hooks_riverpod.dart\u0026#39;; final tripsListControllerProvider = Provider\u0026lt;TripsListController\u0026gt;((ref) { return TripsListController(ref); }); class TripsListController { TripsListController(this.ref); final Ref ref; Future\u0026lt;void\u0026gt; add({ required String name, required String destination, required String startDate, required String endDate, }) async { final trip = Trip( tripName: name, destination: destination, startDate: TemporalDate(DateTime.parse(startDate)), endDate: TemporalDate(DateTime.parse(endDate)), ); final tripsRepository = ref.read(tripsRepositoryProvider); await tripsRepository.add(trip); } } "
},
{
	"uri": "//localhost:55916/vi/6-buildapp/",
	"title": "Xây dựng ứng dụng",
	"tags": [],
	"description": "",
	"content": "Trong nội dung này, bạn sẽ thêm API vào ứng dụng của mình bằng Amplify CLI để truy xuất và lưu trữ dữ liệu chuyến đi. API bạn sẽ tạo là API GraphQL sử dụng AWS AppSync (dịch vụ GraphQL được quản lý) được hỗ trợ bởi Amazon DynamoDB (cơ sở dữ liệu NoSQL).\nNội dung Tạo ứng dụng lập kế hoạch chuyến đi cơ bản cơ bản Giao diện khi triển khai ứng dụng "
},
{
	"uri": "//localhost:55916/vi/7-clean/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Bây giờ bạn đã hoàn tất hướng dẫn này, hãy làm theo các bước dưới đây để xóa tài nguyên AWS nhằm tránh phát sinh chi phí bất ngờ\nTruy cập giao diện Amplify console.aws.amazon.com/amplify/apps\nBước 1: Điều hướng đến thư mục gốc của ứng dụng và chạy lệnh bên dưới trong terminal của bạn.\namplify delete Bước 2: Giả sử ứng dụng của mình có tên là amplify4, Mở AWS Amplify sau đó chọn Ứng dụng amplify4, chọn View app Bước 3: Chọn App settings → chọn General settings → chọn Manage backends Bước 4: Chọn Actions ở phía bên trên → chọn delete app, đợi khoảng 1 phút Chúc mừng bạn đã xóa thành công các tài nguyên "
},
{
	"uri": "//localhost:55916/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:55916/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
[
{
	"uri": "//localhost:1313/4-addauth/4.1-addauth/",
	"title": "Add the Amplify authentication category to the application",
	"tags": [],
	"description": "",
	"content": "Step 1: Navigate to the root directory of your application and run the command below in your terminal.\namplify add auth Step 2: Select the Default configuration option and then choose Email as the login method. Then select the No, I am done option.\nUsing service: Cognito, provided by: awscloudformation The current configured provider is Amazon Cognito. Do you want to use the default authentication and security configuration? Default configuration Warning: you will not be able to edit these selections. How do you want users to be able to sign in? Email Do you want to configure advanced settings? No, I am done. ✅ Successfully added auth resource memorymatchgame28e6d925 locally ✅ Some next steps: \u0026#34;amplify push\u0026#34; will build all your local backend resources and provision it in the cloud \u0026#34;amplify publish\u0026#34; will build all your local backend and frontend resources (if you have hosting category added) and provision it in the cloud Step 3: Now the Amplify Auth category is ready. Run the amplify push command to create the resources in the cloud. Step 4: Press Enter. The Amplify CLI will deploy the authentication resources and display a confirmation, as shown in the screenshot. "
},
{
	"uri": "//localhost:1313/6-buildapp/6.1-createprogram/",
	"title": "Create a basic trip planning application",
	"tags": [],
	"description": "",
	"content": "The following code snippets will create the front end for the application. You can modify these code snippets as you like.\nStep 1: Create the file lib/features/trip/ui/trips_list/add_trip_bottomsheet.dart and update it with the following code:\nimport \u0026#39;package:amplify_2/features/trip/controller/trips_list_controller.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_hooks/flutter_hooks.dart\u0026#39;; import \u0026#39;package:hooks_riverpod/hooks_riverpod.dart\u0026#39;; import \u0026#39;package:intl/intl.dart\u0026#39;; class AddTripBottomSheet extends HookConsumerWidget { AddTripBottomSheet({ super.key, }); final formGlobalKey = GlobalKey\u0026lt;FormState\u0026gt;(); @override Widget build(BuildContext context, WidgetRef ref) { final tripNameController = useTextEditingController(); final destinationController = useTextEditingController(); final startDateController = useTextEditingController(); final endDateController = useTextEditingController(); return Form( key: formGlobalKey, child: Container( padding: EdgeInsets.only( top: 15, left: 15, right: 15, bottom: MediaQuery.of(context).viewInsets.bottom + 15, ), width: double.infinity, child: Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ TextFormField( controller: tripNameController, keyboardType: TextInputType.name, autofocus: true, autocorrect: false, decoration: const InputDecoration(hintText: \u0026#39;Tên chuyến đi\u0026#39;), textInputAction: TextInputAction.next, validator: (value) { const validatorError = \u0026#34;Vui lòng nhập chuyến đi\u0026#34;; if (value == null || value.isEmpty) { return validatorError; } return null; }, ), const SizedBox( height: 20, ), TextFormField( keyboardType: TextInputType.name, controller: destinationController, autofocus: true, autocorrect: false, decoration: const InputDecoration(hintText: \u0026#34;Mô tả chuyến đi\u0026#34;), textInputAction: TextInputAction.next, validator: (value) { if (value == null || value.isNotEmpty) { return null; } else { return \u0026#39;Vui lòng nhập mô tả chuyến đi\u0026#39;; } }, ), TextFormField( keyboardType: TextInputType.datetime, controller: startDateController, autofocus: true, autocorrect: false, decoration: const InputDecoration(hintText: \u0026#34;Ngày bắt đầu\u0026#34;), textInputAction: TextInputAction.next, validator: (value) { if (value != null \u0026amp;\u0026amp; value.isNotEmpty) { return null; } else { return \u0026#39;Vui lòng nhập ngày bắt đầu\u0026#39;; } }, onTap: () async { DateTime? pickedDate = await showDatePicker( context: context, initialDate: DateTime.now(), firstDate: DateTime(2024), lastDate: DateTime(2100), ); if (pickedDate != null) { String formattedDate = DateFormat(\u0026#39;yyyy-MM-dd\u0026#39;).format(pickedDate); startDateController.text = formattedDate; } else {} }, ), TextFormField( keyboardType: TextInputType.datetime, controller: endDateController, autofocus: true, autocorrect: false, decoration: const InputDecoration(hintText: \u0026#34;Ngày kết thúc\u0026#34;), textInputAction: TextInputAction.next, validator: (value) { if (value != null \u0026amp;\u0026amp; value.isNotEmpty) { return null; } else { return \u0026#39;Vui lòng nhập ngày kết thúc\u0026#39;; } }, onTap: () async { if (startDateController.text.isNotEmpty) { DateTime? pickedDate = await showDatePicker( context: context, initialDate: DateTime.parse(startDateController.text), firstDate: DateTime.parse(startDateController.text), lastDate: DateTime(2100), ); if (pickedDate != null) { String formattedDate = DateFormat(\u0026#39;yyyy-MM-dd\u0026#39;).format(pickedDate); endDateController.text = formattedDate; } } }, ), const SizedBox( height: 20, ), TextButton( child: const Text(\u0026#39;OK\u0026#39;), onPressed: () async { final currentState = formGlobalKey.currentState; if (currentState == null) { return; } if (currentState.validate()) { ref.read(tripsListControllerProvider).add( name: tripNameController.text, destination: destinationController.text, startDate: startDateController.text, endDate: endDateController.text); Navigator.of(context).pop(); } }, ), ], ), ), ); } } Step 2: Create the file lib/features/trip/ui/trips_list/trip_card.dart and update it with the following code:\nimport \u0026#39;package:amplify_2/common/navigation/router/routes.dart\u0026#39;; import \u0026#39;package:amplify_2/models/ModelProvider.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:go_router/go_router.dart\u0026#39;; import \u0026#39;package:cached_network_image/cached_network_image.dart\u0026#39;; import \u0026#39;package:intl/intl.dart\u0026#39;; import \u0026#39;package:amplify_2/common/utils/colors.dart\u0026#39; as constants; class TripCard extends StatelessWidget { const TripCard({super.key, required this.trip, this.imageUrl}); final Trip trip; final String? imageUrl; @override Widget build(BuildContext context) { return InkWell( splashColor: Theme.of(context).primaryColor, borderRadius: BorderRadius.circular(15), onTap: () { context.goNamed( AppRoute.trip.name, pathParameters: {\u0026#39;id\u0026#39;: trip.id}, ); }, child: Card( clipBehavior: Clip.antiAlias, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(15), ), elevation: 5.0, child: Column( children: [ Expanded( child: Container( height: 500, alignment: Alignment.center, color: const Color(constants.primaryColorDark), child: Stack( children: [ Positioned.fill( child: trip.tripImageUrl != null ? Stack(children: [ const Center( child: CircularProgressIndicator(), ), CachedNetworkImage( errorWidget: (context, url, dynamic error) =\u0026gt; const Icon(Icons.error_outline_outlined), imageUrl: trip.tripImageUrl!, cacheKey: trip.tripImageKey, width: double.maxFinite, height: 500, alignment: Alignment.topCenter, fit: BoxFit.fill, ) ]) : Image.asset( \u0026#39;images/amplify.png\u0026#39;, fit: BoxFit.contain, ), ), Positioned( bottom: 16, left: 16, right: 16, child: FittedBox( fit: BoxFit.scaleDown, alignment: Alignment.centerLeft, child: Text( trip.destination, style: Theme.of(context) .textTheme .headlineSmall! .copyWith( color: Colors.white, ), ), )) ], ), ), ), Padding( padding: const EdgeInsets.fromLTRB(2, 8, 8, 4), child: DefaultTextStyle( softWrap: false, overflow: TextOverflow.ellipsis, style: Theme.of(context).textTheme.titleMedium!, child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Padding( padding: const EdgeInsets.only(bottom: 8), child: Text( trip.tripName, style: Theme.of(context) .textTheme .titleMedium! .copyWith(color: Colors.black54), ), ), Text( DateFormat(\u0026#39;dd MMM, yyyy\u0026#39;) .format(trip.startDate.getDateTime()), style: const TextStyle(fontSize: 12), ), Text( DateFormat(\u0026#39;dd MMM, yyyy\u0026#39;) .format(trip.endDate.getDateTime()), style: const TextStyle(fontSize: 12), ), ], ))), ], ), ), ); } } Step 3: Go back to the file lib/features/trip/ui/trips_list/trips_list_page.dart and update it with the following code:\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:hooks_riverpod/hooks_riverpod.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/data/trips_repository.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/ui/trips_list/trip_card.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/ui/trips_list/add_trip_bottomsheet.dart\u0026#39;; import \u0026#39;package:amplify_2/common/utils/colors.dart\u0026#39; as constants; class TripsListPage extends HookConsumerWidget { const TripsListPage({ super.key, }); void showAddTripDialog(BuildContext context) async { await showModalBottomSheet( isScrollControlled: true, elevation: 5, context: context, builder: (BuildContext context) { return AddTripBottomSheet(); }, ); } @override Widget build(BuildContext context, WidgetRef ref) { final Orientation orientation = MediaQuery .of(context) .orientation; final tripListValue = ref.watch(tripsListStreamProvider); return Scaffold( appBar: AppBar( centerTitle: true, title: const Text( \u0026#39;Amplify Trips Planner\u0026#39;, ), backgroundColor: const Color(constants.primaryColorDark), ), floatingActionButton: FloatingActionButton( onPressed: () { showAddTripDialog(context); }, backgroundColor: const Color(constants.primaryColorDark), child: const Icon(Icons.add), ), body: tripListValue.when( data: (trips) =\u0026gt; trips.isEmpty ? const Center( child: Text(\u0026#34;Chưa có kế hoạch\u0026#34;), ) : Column( children: [ Flexible( child: GridView.count( crossAxisCount: (orientation == Orientation.portrait) ? 2 : 3, mainAxisSpacing: 4, crossAxisSpacing: 4, padding: const EdgeInsets.all(4), childAspectRatio: (orientation == Orientation.portrait) ? 0.9 : 1.4, children: trips.map((tripData) { return TripCard(trip: tripData!); }).toList(), )) ], ), error: (e, st) =\u0026gt; const Center( child: Text(\u0026#39;Error\u0026#39;), ), loading: () =\u0026gt; const Center( child: CircularProgressIndicator(), ))); } } "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-setupflutter/2.1.1-windown/",
	"title": "For Windows",
	"tags": [],
	"description": "",
	"content": "Dowloading Flutter SDK\nDownload the zip file from the Trang web Flutter. Extract the Flutter SDK to a folder named development on your Desktop. The folder path above is just a recommendation, and this reference will be used throughout the workshop. You can also move it to any other folder. Just make sure to keep track of where your Flutter folder is extracted.\nAdd Flutter to Path\nGo to the extracted Flutter folder and copy its path.\nYou can copy it by right-clicking on the folder and selecting the “Copy as Path” option or by clicking on the navigation bar at the top of the window and copying the path text from there. Click on the Windows icon in the bottom left corner and search for Environment Variables. Select Edit Environment variables for your account. This will open a window with the Advanced tab selected in System Properties. Click the Environment Variables… button. In the window that opens, under System variables, find Path and double-click on it. Add a new entry by clicking the New button on the right and pasting the path you copied earlier. Save and close all windows.\nClose any Command Prompt windows.\nThen open a new Command Prompt and write the following command to check: flutter doctor\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.2-settingandroidstudio/2.2.1-windown/",
	"title": "For Windows",
	"tags": [],
	"description": "",
	"content": "Installing Android Studio\nGo to the download page for Android Studio and download the installer for your system.\nRun the downloaded installer and follow the steps if prompted. This will take about a minute. Installing Flutter Plugin\nAfter installation, run Android Studio.\nIn the left pane, click on the Preferences button.\nIn the search field, find or select Flutter and click install.\nNote that it will also prompt you to install the Dart plugin. Accept this.\nRestart the IDE.\nYour IDE is now ready.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-setupflutter/",
	"title": "Installing Flutter",
	"tags": [],
	"description": "",
	"content": "Content For Windows For macOS "
},
{
	"uri": "//localhost:1313/",
	"title": "Integrating AWS Amplify into Flutter",
	"tags": [],
	"description": "",
	"content": "Integrating AWS Amplify into Flutter: Building a Basic Mobile Application with Flutter and AWS Amplify Overview Flutter and AWS Amplify are a perfect combination for building modern mobile applications. In this workshop, we will explore how to use these two tools to build a basic trip planning application.\nContent Introduction Setting up the environment Creating a Flutter project Adding the Authenticator feature Adding Amplify API to the application Building the application Cleaning up resources "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction to Flutter and AWS Amplify and the goals of this workshop.\nContent Introduction to Flutter and AWS Amplify Goals of the Workshop "
},
{
	"uri": "//localhost:1313/1-introduce/1.1-anf/",
	"title": "Introduction to Flutter and AWS Amplify",
	"tags": [],
	"description": "",
	"content": "Flutter: Quickly Create Cross-Platform Mobile Applications\nFlutter is an open-source SDK (Software Development Kit) developed by Google, allowing developers to build mobile, web, and desktop applications from a single codebase.\nWhy Choose Flutter?\nHigh Performance: Provides a smooth, nearly native user experience. Beautiful UI: Flexible and highly customizable UI framework, enabling the creation of modern-looking applications. Hot Reload: Change code and see results instantly, speeding up development. Cross-Platform: Write code once, run on multiple platforms (iOS, Android, Web, Desktop). Large Community: A large user community with extensive documentation and library support. AWS Amplify: Comprehensive Backend Solution for Mobile Applications AWS Amplify is a set of tools and libraries from Amazon Web Services that makes it easy for developers to add backend features to their mobile applications.\nWhy Choose AWS Amplify?\nEasy Integration: Easily connect to AWS services like Cognito, API Gateway, DynamoDB. Rich Features: Provides features like user authentication, data storage, push notifications, analytics. Flexible Expansion: Can be customized and expanded to meet specific application requirements. Integration with Multiple Frameworks: Supports various frameworks such as Flutter, React Native, Ionic. "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-setupflutter/2.1.2-macos/",
	"title": "For mac OS",
	"tags": [],
	"description": "",
	"content": "Download Flutter SDK\nDownload the zip file from the Flutter. flutter_macOS_\u0026lt;-version-number-\u0026gt;.zipflutter_macos_arm64_\u0026lt;-version-number-\u0026gt;.zip Make sure to download the correct Flutter release package for your Mac’s chip. Download the file for Intel-based laptops or the file for Apple Silicon.\nExtract the Flutter SDK into a folder named development on your Desktop. The folder path above is just a recommendation and will be referenced throughout the workshop. You can also move it to any other folder. Just make sure to keep track of where your Flutter folder is extracted.\nAdd Flutter to Path\nGo to the extracted Flutter folder and copy its path: You can copy it by right-clicking on the Flutter folder and selecting the “Get Info” option. This will open a window with folder information. In the General tab, check the Where information. Select all the text and copy it. Open the terminal and write the following command to determine your terminal type: echo $SHELL If you are using Bash, write: open ~/.bash_profile # or open ~/.bashrc If you are using Z shell, write: open ~/.zshrc Paste the following content into the file as a new line: export PATH=\u0026#34;$PATH:[PATH_OF_FLUTTER]/flutter/bin\u0026#34; Close all terminals and open a new terminal. Then open a new Terminal and write the following command to check: flutter doctor "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.2-settingandroidstudio/2.2.2-macos/",
	"title": "For mac OS",
	"tags": [],
	"description": "",
	"content": "Setting Android Studio\nGo to the download page for Android Studio and download the installer for your system. Extract the zip file and move the extracted Android Studio application to a folder. Follow the steps here to install the command line tools. Installing Flutter Plugin\nAfter installation, run Android Studio. In the left pane, click on the Preferences button. In the search field that opens, type Flutter and install the Flutter plugin from the search results. Note that it will also prompt you to install the Dart plugin. Accept this. Restart the IDE. Your IDE is now ready. "
},
{
	"uri": "//localhost:1313/1-introduce/1.2-target/",
	"title": "Goals of the Workshop",
	"tags": [],
	"description": "",
	"content": " Create an Amplify backend for the application\nBuild a simple Flutter application with login and registration functionality using AWS Amplify Auth.\nAdd an API to your application using the Amplify CLI to retrieve and store session data. The API you will create is a GraphQL API using AWS AppSync (a managed GraphQL service) backed by Amazon DynamoDB (a NoSQL database).\n"
},
{
	"uri": "//localhost:1313/4-addauth/4.2-amplifyauth/",
	"title": "Implement the application authentication flow using Amplify Authenticator",
	"tags": [],
	"description": "",
	"content": "Step 1: Create the file lib/features/trip/ui/trips_list/trips_list_page.dart nd update it with the following code. This will be the home page of the application.\nimport \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:hooks_riverpod/hooks_riverpod.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/data/trips_repository.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/ui/trips_list/trip_card.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/ui/trips_list/add_trip_bottomsheet.dart\u0026#39;; import \u0026#39;package:amplify_2/common/utils/colors.dart\u0026#39; as constants; class TripsListPage extends HookConsumerWidget { const TripsListPage({ super.key, }); @override Widget build(BuildContext context, WidgetRef ref) { final Orientation orientation = MediaQuery .of(context) .orientation; final tripListValue = ref.watch(tripsListStreamProvider); return Scaffold( appBar: AppBar( centerTitle: true, title: const Text( \u0026#39;Amplify Trips Planner\u0026#39;, ), backgroundColor: const Color(constants.primaryColorDark), ), floatingActionButton: FloatingActionButton( onPressed: () { }, backgroundColor: const Color(constants.primaryColorDark), child: const Icon(Icons.add), ), body: const Center( child: Text(\u0026#39;Danh sách chuyến đi\u0026#39;), ) ); } } Step 2: Create the file lib/trips_planner_app.dart . Update the file with the following code to create the route for the application’s home page.\nThe code below will set up the basic structure to display a list of trips and have a button (bottom/right) to add a new trip. The list of trips and the functionality to add a trip will be implemented in other parts of the application. import \u0026#39;package:amplify_2/features/trip/ui/trips_list/trips_list_page.dart\u0026#39;; import \u0026#39;package:amplify_authenticator/amplify_authenticator.dart\u0026#39;; import \u0026#39;package:amplify_2/common/navigation/router/routes.dart\u0026#39;; import \u0026#39;package:amplify_2/common/utils/colors.dart\u0026#39; as constants; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:go_router/go_router.dart\u0026#39;; class TripsPlannerApp extends StatelessWidget { const TripsPlannerApp({ required this.isAmplifySuccessfullyConfigured, super.key, }); final bool isAmplifySuccessfullyConfigured; @override Widget build(BuildContext context) { final router = GoRouter( routes: [ GoRoute( path: \u0026#39;/\u0026#39;, name: AppRoute.home.name, builder: (context, state) =\u0026gt; isAmplifySuccessfullyConfigured ? const TripsListPage() : const Scaffold( body: Center( child: Text(\u0026#39;Đã cố gắng cấu hình Amplify\u0026#39;), ), ) ) ], errorBuilder: (context, state) =\u0026gt; Scaffold( body: Center( child: Text(state.error.toString()), ), ) ); return Authenticator( child: MaterialApp.router( routerConfig: router, builder: Authenticator.builder(), theme: ThemeData( colorScheme: ColorScheme.fromSwatch(primarySwatch: constants.primaryColor) .copyWith( background: const Color(0xff82CFEA), ), ), ), ); } } Step 3: Open the main.dart file and update it with the following code. This code contains the Amplify configuration logic for the Auth category.\nThe code below is used to initialize and configure AWS Amplify services (AmplifyAuthCognito has been added). import \u0026#39;package:amplify_2/trips_planner_app.dart\u0026#39;; import \u0026#39;package:amplify_api/amplify_api.dart\u0026#39;; import \u0026#39;package:amplify_auth_cognito/amplify_auth_cognito.dart\u0026#39;; import \u0026#39;package:amplify_flutter/amplify_flutter.dart\u0026#39;; import \u0026#39;package:amplify_storage_s3/amplify_storage_s3.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_riverpod/flutter_riverpod.dart\u0026#39;; import \u0026#39;amplifyconfiguration.dart\u0026#39;; import \u0026#39;package:amplify_api/amplify_api.dart\u0026#39;; import \u0026#39;package:amplify_datastore/amplify_datastore.dart\u0026#39;; import \u0026#39;package:amplify_2/models/ModelProvider.dart\u0026#39;; Future\u0026lt;void\u0026gt; main() async { WidgetsFlutterBinding.ensureInitialized(); bool isAmplifySuccessfullyConfigured = false; try { await _configureAmplify(); isAmplifySuccessfullyConfigured = true; } on AmplifyAlreadyConfiguredException { debugPrint(\u0026#39;Amplify configuration failed.\u0026#39;); } runApp( ProviderScope( child: TripsPlannerApp( isAmplifySuccessfullyConfigured: isAmplifySuccessfullyConfigured)), ); } Future\u0026lt;void\u0026gt; _configureAmplify() async { await Amplify.addPlugins([ AmplifyAuthCognito(), ]); await Amplify.configure(amplifyconfig); } Step 4: Use the command below to run the application on your phone, using the authentication flow to create a new account.\nflutter run "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.2-settingandroidstudio/",
	"title": "Installing Android Studio",
	"tags": [],
	"description": "",
	"content": " You can use Visual Studio Code or other IDEs for this workshop, but it is recommended to use Android Studio because it focuses on native programming, which results in faster processing speeds. (If your computer is not very powerful, I recommend using Visual Studio Code.)\nIn this workshop, I will use Android Studio for the entire workshop.\nContent For Windows For macOS "
},
{
	"uri": "//localhost:1313/6-buildapp/6.2-interface/",
	"title": "Interface when deploying the application",
	"tags": [],
	"description": "",
	"content": " Your browser does not support the video tag. "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Setting up the environment",
	"tags": [],
	"description": "",
	"content": "In this section, we will set up the environment, including installing Flutter and Android Studio, and creating an IAM user for this workshop.\nContent Installing Flutter Studio Installing Android Creating an IAM user "
},
{
	"uri": "//localhost:1313/3-createproject/3.1-pubspecandpath/",
	"title": "Configure the pubspec.yaml file and paths",
	"tags": [],
	"description": "",
	"content": " Since Amplify is constantly updating to the latest versions, and the latest versions can conflict with other packages, it is important to install the correct versions to ensure the application runs smoothly.\nAdd the following libraries: version: 1.0.0+1 environment: sdk: ^3.5.1 dependencies: flutter: sdk: flutter cupertino_icons: ^1.0.8 amplify_api: ^2.4.0 amplify_auth_cognito: ^2.4.0 amplify_authenticator: ^2.1.2 amplify_datastore: ^2.4.0 amplify_flutter: ^2.4.0 amplify_storage_s3: ^2.4.0 cached_network_image: ^3.4.0 flutter_hooks: ^0.20.5 flutter_riverpod: ^2.5.1 go_router: ^14.2.7 hooks_riverpod: ^2.5.2 image_picker: ^1.1.2 intl: ^0.19.0 file_picker: ^8.0.7 timelines: ^0.1.0 url_launcher: ^6.3.0 dev_dependencies: flutter_lints: ^4.0.0 flutter_test: sdk: flutter flutter: #Create an image folder named images and place an image in the library uses-material-design: true assets: - images/amplify.png Due to frequent conflicts between versions of Amplify, Dart, and Flutter, I will pre-configure the following files in case you encounter errors\nFor Android:\nConfigure file android/app/build.gradle plugins { id \u0026#34;com.android.application\u0026#34; id \u0026#34;kotlin-android\u0026#34; // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins. id \u0026#34;dev.flutter.flutter-gradle-plugin\u0026#34; } android { namespace = \u0026#34;com.example.nameapp\u0026#34; compileSdk = flutter.compileSdkVersion ndkVersion = flutter.ndkVersion compileOptions { sourceCompatibility = JavaVersion.VERSION_1_8 targetCompatibility = JavaVersion.VERSION_1_8 } kotlinOptions { jvmTarget = \u0026#39;1.8\u0026#39; freeCompilerArgs += [ \u0026#39;-Xskip-metadata-version-check\u0026#39; ] } defaultConfig { // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html). applicationId = \u0026#34;com.example.nameapp\u0026#34; // You can update the following values to match your application needs. // For more information, see: https://flutter.dev/to/review-gradle-config. minSdkVersion 24 targetSdk = flutter.targetSdkVersion versionCode = flutter.versionCode versionName = flutter.versionName } buildTypes { release { // TODO: Add your own signing config for the release build. // Signing with the debug keys for now, so `flutter run --release` works. signingConfig = signingConfigs.debug } } } flutter { source = \u0026#34;../..\u0026#34; } Configure file android/settings.gradle pluginManagement { def flutterSdkPath = { def properties = new Properties() file(\u0026#34;local.properties\u0026#34;).withInputStream { properties.load(it) } def flutterSdkPath = properties.getProperty(\u0026#34;flutter.sdk\u0026#34;) assert flutterSdkPath != null, \u0026#34;flutter.sdk not set in local.properties\u0026#34; return flutterSdkPath }() includeBuild(\u0026#34;$flutterSdkPath/packages/flutter_tools/gradle\u0026#34;) repositories { google() mavenCentral() gradlePluginPortal() } } plugins { id \u0026#34;dev.flutter.flutter-plugin-loader\u0026#34; version \u0026#34;1.0.0\u0026#34; id \u0026#34;com.android.application\u0026#34; version \u0026#34;7.3.0\u0026#34; apply false id \u0026#34;org.jetbrains.kotlin.android\u0026#34; version \u0026#34;2.0.20\u0026#34; apply false } include \u0026#34;:app\u0026#34; For iOS:\nCreate a file named Podfile # Uncomment this line to define a global platform for your project platform :ios, \u0026#39;13.5\u0026#39; # CocoaPods analytics sends network stats synchronously affecting flutter build latency. ENV[\u0026#39;COCOAPODS_DISABLE_STATS\u0026#39;] = \u0026#39;true\u0026#39; project \u0026#39;Runner\u0026#39;, { \u0026#39;Debug\u0026#39; =\u0026gt; :debug, \u0026#39;Profile\u0026#39; =\u0026gt; :release, \u0026#39;Release\u0026#39; =\u0026gt; :release, } def flutter_root generated_xcode_build_settings_path = File.expand_path(File.join(\u0026#39;..\u0026#39;, \u0026#39;Flutter\u0026#39;, \u0026#39;Generated.xcconfig\u0026#39;), __FILE__) unless File.exist?(generated_xcode_build_settings_path) raise \u0026#34;#{generated_xcode_build_settings_path} must exist. If you\u0026#39;re running pod install manually, make sure flutter pub get is executed first\u0026#34; end File.foreach(generated_xcode_build_settings_path) do |line| matches = line.match(/FLUTTER_ROOT\\=(.*)/) return matches[1].strip if matches end raise \u0026#34;FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get\u0026#34; end require File.expand_path(File.join(\u0026#39;packages\u0026#39;, \u0026#39;flutter_tools\u0026#39;, \u0026#39;bin\u0026#39;, \u0026#39;podhelper\u0026#39;), flutter_root) flutter_ios_podfile_setup target \u0026#39;Runner\u0026#39; do use_frameworks! use_modular_headers! flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__)) end post_install do |installer| installer.pods_project.targets.each do |target| flutter_additional_ios_build_settings(target) end end Create the following folder structure: Create file lib/common/navigation/router/routes.dart\nenum AppRoute { home, trip, editTrip, } Create file lib/common/utils/colors.dart import \u0026#39;package:flutter/material.dart\u0026#39;; const Map\u0026lt;int, Color\u0026gt; primarySwatch = { 50: Color.fromRGBO(255, 207, 68, .1), 100: Color.fromRGBO(255, 207, 68, .2), 200: Color.fromRGBO(255, 207, 68, .3), 300: Color.fromRGBO(255, 207, 68, .4), 400: Color.fromRGBO(255, 207, 68, .5), 500: Color.fromRGBO(255, 207, 68, .6), 600: Color.fromRGBO(255, 207, 68, .7), 700: Color.fromRGBO(255, 207, 68, .8), 800: Color.fromRGBO(255, 207, 68, .9), 900: Color.fromRGBO(255, 207, 68, 1), }; const MaterialColor primaryColor = MaterialColor(0xFFFFCF44, primarySwatch); const int primaryColorDark = 0xFFFD9725; "
},
{
	"uri": "//localhost:1313/3-createproject/3.2-connectamplify/",
	"title": "Connect to AWS Amplify",
	"tags": [],
	"description": "",
	"content": "Step 1: Navigate to the root directory of your application and provision the Amplify backend for the application by running the command below in your terminal.\namplify init Step 2: Enter a name for the Amplify project or accept the suggested name and press Enter.\n? Enter a name for the project memorymatchgame The following configuration will be applied: Project information | Name: memorymatchgame | Environment: dev | Default editor: Visual Studio Code | App type: flutter | Configuration file location: ./lib/ ? Initialize the project with the above configuration? (Y/n) For android studio user: Step 3: Press Enter again to accept the default settings and choose the AWS Authentication method. In this example, I am using the AWS configuration. The Amplify CLI will initialize the backend and connect the project to the cloud.\nFor Visual Studio Code users: The Amplify CLI will add a new folder named amplify to the root directory of your application, containing the Amplify project and backend details. It will also add a new dart file (amplifyconfiguration.dart) to the lib/ directory. The application will use this file to know how to access your provisioned backend resources when running. "
},
{
	"uri": "//localhost:1313/3-createproject/",
	"title": "Creating a Flutter Project",
	"tags": [],
	"description": "",
	"content": "In this section, we will add the Amplify packages and other dependencies to the application, as well as create the constants that the application will use to define its routes and colors. Finally, we will provision the Amplify backend for the application.\nContent Configure the pubspec.yaml file and paths Connect to AWS Amplify "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.3-settingamplifycli/",
	"title": "Creating an IAM user",
	"tags": [],
	"description": "",
	"content": "Installing Amplify CLI\nInstall cURL if you haven’t from the official website. Run the following commands to install the Amplify CLI Mac and Linux: curl -sL https://aws-amplify.github.io/amplify-cli/install | bash \u0026amp;\u0026amp; $SHELL Windows: curl -sL https://aws-amplify.github.io/amplify-cli/install-win -o install.cmd \u0026amp;\u0026amp; install.cmd Configure Amplify\nThe Amplify CLI requires an IAM user with appropriate policy permissions to interact with your AWS account. This command will guide you through creating a new user in your AWS account and storing the user profile credentials in your local environment. Future commands run with the CLI will use these credentials to perform actions that require amplify configure. amplify configure amplify configure will prompt you to log in to the AWS Console.\nAfter logging in, the Amplify CLI will prompt you to create an IAM user. Choose your desired region and follow the instructions.\nSpecify the AWS Region ? region: # Your preferred region Follow the instructions at https://docs.amplify.aws/cli/start/install/#configure-the-amplify-cli to complete the user creation in the AWS console https://console.aws.amazon.com/iamv2/home#/users/create Create an IAM User\nNavigate to the IAM User Creation Page if it is not already open.\nEnter a username and select Next. You can name the user anything, but I will call it amplify-dev. Select Attach policies directly and choose AdministratorAccess-Amplify as the Permissions policy. Select Next. On the Review, page, check that everything looks good and select Create user. This will redirect to the user list page. Select the user you just created. On the user details page, navigate to the Security credentials tab, scroll down to Access keys and select Create access keys. On the next page, select Command Line Interface, acknowledge the warning, and select Next. On the next page, select Create access key. You will then see a page with the access keys for the user. Use the copy icon to copy these values to your clipboard, select the Done, button, and then return to the Amplify CLI. Enter Access Key and Secret Access Key Enter the values you just copied into the corresponding CLI prompts. Use AmplifyWorkshop as the profile name. Enter the access key of the newly created user: ? accessKeyId: # YOUR_ACCESS_KEY_ID ? secretAccessKey: # YOUR_SECRET_ACCESS_KEY This would update/create the AWS Profile in your local machine ? Profile Name: # (default) Successfully set up the new user. "
},
{
	"uri": "//localhost:1313/4-addauth/4.3-screenauth/",
	"title": "The application authentication screen using Amplify Authenticator.",
	"tags": [],
	"description": "",
	"content": " Your browser does not support the video tag. "
},
{
	"uri": "//localhost:1313/4-addauth/",
	"title": "Add Auth Feature",
	"tags": [],
	"description": "",
	"content": "In this section, we will add the Amplify packages and other dependencies to the application. Next, we will create the constants that the application will use to define its routes and colors. Finally, we will provision the Amplify backend for the application.\nContent Add the Amplify authentication category to the application Implement the application authentication flow using Amplify Authenticator. Create the application authentication screen using Amplify Authenticator. View information about registered users through Amplify Auth on the AWS Console. "
},
{
	"uri": "//localhost:1313/4-addauth/4.4-profileuser/",
	"title": "View information about registered users through Amplify Auth on the AWS Console",
	"tags": [],
	"description": "",
	"content": " You need to access the Amazon Cognito service because Amplify Auth uses Cognito as its backend.\nHere are the steps you can follow:\nLog in to the AWS Console (console.aws.amazon.com).\nFind and select the “Cognito” service from the list of services.\nSelect “Manage User Pools”.\nFind and select the User Pool corresponding to your Amplify application. In the left menu, select the “User pool name” you created earlier.\nHere, you will see a list of all registered users. "
},
{
	"uri": "//localhost:1313/5-addamplifyapi/5.1-addapi/",
	"title": "Add Amplify API to the Application",
	"tags": [],
	"description": "",
	"content": "Step 1: Navigate to the root directory of your application and provision the Amplify API resources by running the command below in your terminal.\namplify add api Step 2: Select the GraphQL option and press Enter. Update the suggested settings as below. Scroll to the Authorization modes option and change it to Amazon Cognito User Pool. Select No for the additional authentication type prompt. Choose the Continue option. For the GraphQL API, select Conflict detection: Disabled, then choose yes. For the default resolution strategy, select Auto Merge, then choose Continue. Select the Blank Schema template and press Enter. Select No to the schema editing prompt. The Amplify CLI will add a new directory for the API, which contains the schema.graphql file where you will define the models for your application. Step 3: Open the schema.graphql file and replace its contents with the following to define the session model.\ntype Trip @model @auth(rules: [{ allow: owner }]) { id: ID! tripName: String! destination: String! startDate: AWSDate! endDate: AWSDate! tripImageUrl: String tripImageKey: String } "
},
{
	"uri": "//localhost:1313/5-addamplifyapi/",
	"title": "Add Amplify API to the Application",
	"tags": [],
	"description": "",
	"content": "In this section, we will authenticate users using the Amplify authentication category by utilizing Amazon Cognito, a managed user identity service. We will also learn how to use the Amplify Authenticator library to quickly create an authentication flow for the application, allowing users to sign up, log in, and reset their passwords with just a few lines of code.\nContent Add Amplify API to the Application Add the session data model to the application Deploy the application features "
},
{
	"uri": "//localhost:1313/5-addamplifyapi/5.2-adddata/",
	"title": "Add the session data model to the application",
	"tags": [],
	"description": "",
	"content": "Step 1: Run the command below in the root directory of your application to create the session model file.\namplify codegen models The Amplify CLI will generate Dart files in the lib/models directory.\nStep 2: Run the amplify push command to create the resources in the cloud. Step 3: Press Enter. The Amplify CLI will deploy the resources and display a confirmation, as shown in the screenshot. Step 4: Open the main.dart file and update it as below to add the Amplify API plugin to the _configureAmplify() function.\nimport \u0026#39;package:amplify_2/trips_planner_app.dart\u0026#39;; import \u0026#39;package:amplify_api/amplify_api.dart\u0026#39;; import \u0026#39;package:amplify_auth_cognito/amplify_auth_cognito.dart\u0026#39;; import \u0026#39;package:amplify_flutter/amplify_flutter.dart\u0026#39;; import \u0026#39;package:amplify_storage_s3/amplify_storage_s3.dart\u0026#39;; import \u0026#39;package:flutter/material.dart\u0026#39;; import \u0026#39;package:flutter_riverpod/flutter_riverpod.dart\u0026#39;; import \u0026#39;amplifyconfiguration.dart\u0026#39;; import \u0026#39;package:amplify_api/amplify_api.dart\u0026#39;; import \u0026#39;package:amplify_datastore/amplify_datastore.dart\u0026#39;; import \u0026#39;package:amplify_2/models/ModelProvider.dart\u0026#39;; Future\u0026lt;void\u0026gt; main() async { WidgetsFlutterBinding.ensureInitialized(); bool isAmplifySuccessfullyConfigured = false; try { await _configureAmplify(); isAmplifySuccessfullyConfigured = true; } on AmplifyAlreadyConfiguredException { debugPrint(\u0026#39;Amplify configuration failed.\u0026#39;); } runApp( ProviderScope( child: TripsPlannerApp( isAmplifySuccessfullyConfigured: isAmplifySuccessfullyConfigured)), ); } Future\u0026lt;void\u0026gt; _configureAmplify() async { await Amplify.addPlugins([ AmplifyAuthCognito(), AmplifyDataStore(modelProvider: ModelProvider.instance), AmplifyAPI(), ]); await Amplify.configure(amplifyconfig); } "
},
{
	"uri": "//localhost:1313/5-addamplifyapi/5.3-upfeature/",
	"title": "Deploy the application features",
	"tags": [],
	"description": "",
	"content": "Step 1: Create the file lib/features/trip/services/trips_datastore_service.dart and update it with the following code to create the TripsDataStoreService file containing the following functions:\nThis code defines a TripsDataStoreService to manage trip data in the application. This service provides methods to listen for changes in trip data, add, delete, and update trips (currently only \u0026lsquo;add\u0026rsquo;) in Amplify\u0026rsquo;s DataStore. import \u0026#39;dart:async\u0026#39;; import \u0026#39;package:amplify_flutter/amplify_flutter.dart\u0026#39;; import \u0026#39;package:amplify_2/models/ModelProvider.dart\u0026#39;; import \u0026#39;package:flutter/cupertino.dart\u0026#39;; import \u0026#39;package:flutter_riverpod/flutter_riverpod.dart\u0026#39;; final tripsDataStoreServiceProvider = Provider\u0026lt;TripsDataStoreService\u0026gt;((ref) { final service = TripsDataStoreService(); return service; }); class TripsDataStoreService { TripsDataStoreService(); Stream\u0026lt;List\u0026lt;Trip\u0026gt;\u0026gt; listenToTrips() { return Amplify.DataStore.observeQuery( Trip.classType, sortBy: [Trip.STARTDATE.ascending()], ) .map((event) =\u0026gt; event.items .where((element) =\u0026gt; element.endDate.getDateTime().isAfter(DateTime.now())) .toList()) .handleError( (error) { debugPrint(\u0026#39;listenToTrips: A Stream error happened\u0026#39;); }, ); } Stream\u0026lt;List\u0026lt;Trip\u0026gt;\u0026gt; listenToPastTrips() { return Amplify.DataStore.observeQuery( Trip.classType, sortBy: [Trip.STARTDATE.ascending()], ) .map((event) =\u0026gt; event.items .where((element) =\u0026gt; element.endDate.getDateTime().isBefore(DateTime.now())) .toList()) .handleError( (error) { debugPrint(\u0026#39;listenToTrips: A Stream error happened\u0026#39;); }, ); } Stream\u0026lt;Trip\u0026gt; getTripStream(String id) { final tripStream = Amplify.DataStore.observeQuery(Trip.classType, where: Trip.ID.eq(id)).map((event) =\u0026gt; event.items.toList().single); return tripStream; } Future\u0026lt;void\u0026gt; addTrip(Trip trip) async { try { await Amplify.DataStore.save(trip); } on Exception catch (error) { debugPrint(error.toString()); } } Future\u0026lt;void\u0026gt; deleteTrip(Trip trip) async { try { await Amplify.DataStore.delete(trip); } on Exception catch (error) { debugPrint(error.toString()); } } Future\u0026lt;void\u0026gt; updateTrip(Trip updatedTrip) async { try { final tripsWithId = await Amplify.DataStore.query(Trip.classType, where: Trip.ID.eq(updatedTrip.id),); final oldTrip = tripsWithId.first; final newTrip = oldTrip.copyWith(tripName: updatedTrip.tripName, destination: updatedTrip.destination, startDate: updatedTrip.startDate, endDate: updatedTrip.endDate, tripImageKey: updatedTrip.tripImageKey, tripImageUrl: updatedTrip.tripImageUrl, ); await Amplify.DataStore.save(newTrip); } on Exception catch (error) { debugPrint(error.toString()); } } } Step 2: Create the file lib/features/trip/data/trips_repository.dart and update it with the following code:\nThe code below defines a TripsRepository to manage trip data in the Flutter application using AWS Amplify and Riverpod. This service provides methods to retrieve the list of trips, add new trips, and get detailed information about a specific trip. We use Riverpod to manage state and provide data to widgets in the application. import \u0026#39;package:amplify_2/features/trip/services/trips_datastore_service.dart\u0026#39;; import \u0026#39;package:amplify_2/models/Trip.dart\u0026#39;; import \u0026#39;package:hooks_riverpod/hooks_riverpod.dart\u0026#39;; final tripsRepositoryProvider = Provider\u0026lt;TripsRepository\u0026gt;((ref) { TripsDataStoreService tripsDataStoreService = ref.read(tripsDataStoreServiceProvider); return TripsRepository(tripsDataStoreService); }); final tripsListStreamProvider = StreamProvider.autoDispose\u0026lt;List\u0026lt;Trip?\u0026gt;\u0026gt;((ref){ final tripsRepository = ref.watch(tripsRepositoryProvider); return tripsRepository.getTrips(); }); class TripsRepository { TripsRepository(this.tripsDataStoreService); final TripsDataStoreService tripsDataStoreService; Stream\u0026lt;List\u0026lt;Trip\u0026gt;\u0026gt; getTrips() { return tripsDataStoreService.listenToTrips(); } Future\u0026lt;void\u0026gt; add(Trip trip) async { return tripsDataStoreService.addTrip(trip); } Stream\u0026lt;Trip\u0026gt; get(String id) { return tripsDataStoreService.getTripStream(id); } } Step 3: Open the file lib/features/trip/controller/trips_list_controller.dart and update it with the following code:\nThe code below also defines a TripsListController to manage the addition of new trips to the Flutter application using AWS Amplify and Riverpod. This service provides a method to add new trips to Amplify\u0026rsquo;s DataStore. It uses Riverpod to manage state and provide data to widgets in the application. Copy import \u0026#39;package:amplify_flutter/amplify_flutter.dart\u0026#39;; import \u0026#39;package:amplify_2/features/trip/data/trips_repository.dart\u0026#39;; import \u0026#39;package:amplify_2/models/ModelProvider.dart\u0026#39;; import \u0026#39;package:hooks_riverpod/hooks_riverpod.dart\u0026#39;; final tripsListControllerProvider = Provider\u0026lt;TripsListController\u0026gt;((ref) { return TripsListController(ref); }); class TripsListController { TripsListController(this.ref); final Ref ref; Future\u0026lt;void\u0026gt; add({ required String name, required String destination, required String startDate, required String endDate, }) async { final trip = Trip( tripName: name, destination: destination, startDate: TemporalDate(DateTime.parse(startDate)), endDate: TemporalDate(DateTime.parse(endDate)), ); final tripsRepository = ref.read(tripsRepositoryProvider); await tripsRepository.add(trip); } } "
},
{
	"uri": "//localhost:1313/6-buildapp/",
	"title": "Build the Application",
	"tags": [],
	"description": "",
	"content": "In this section, you will add an API to your application using the Amplify CLI to retrieve and store trip data. The API you will create is a GraphQL API using AWS AppSync (a managed GraphQL service) backed by Amazon DynamoDB (a NoSQL database).\nContent Create a basic trip planning application Interface when deploying the application "
},
{
	"uri": "//localhost:1313/7-clean/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "Now that you have completed this tutorial, follow the steps below to delete AWS resources to avoid incurring unexpected costs. Access the Amplify interface at console.aws.amazon.com/amplify/apps\nStep 1: Navigate to the root directory of your application and run the command below in your terminal.\namplify delete Step 2: Assuming your application is named amplify4, open AWS Amplify, then select the amplify4 application, and choose View app. Step 3: Select App settings → General settings → Manage backends. Step 4: Select Actions at the top → choose delete app, and wait about 1 minute. Congratulations on successfully deleting the resources "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]